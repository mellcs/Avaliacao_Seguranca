version: "3.9"

networks:
  webnet:
    driver: bridge
  backnet:
    driver: bridge

volumes:
  pgdata:

services:
  db:
    image: postgres:16-alpine
    container_name: db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      APP_DB_USER: ${APP_DB_USER}
      APP_DB_PASSWORD: ${APP_DB_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
    networks:
      - backnet
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 3s
      retries: 10
    restart: unless-stopped
    logging:
      options:
        max-size: "10m"
        max-file: "3"

  api:
    build: ./api
    container_name: api
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      APP_DB_USER: ${APP_DB_USER}
      APP_DB_PASSWORD: ${APP_DB_PASSWORD}
      API_PORT: ${API_PORT}
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "3000:3000" 
    # Seguran√ßa extra
    read_only: true
    tmpfs:
      - /tmp
    networks:
      - webnet
      - backnet
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 3s
      retries: 10
    logging:
      options:
        max-size: "10m"
        max-file: "3"

  web:
    build: ./web
    container_name: web
    depends_on:
      api:
        condition: service_healthy
    ports:
      - "${WEB_PORT}:8080"
    tmpfs:
      - /var/cache/nginx
      - /var/run
    networks:
      - webnet
    restart: unless-stopped
    logging:
      options:
        max-size: "10m"
        max-file: "3"
